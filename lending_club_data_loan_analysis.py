# -*- coding: utf-8 -*-
"""Lending Club Data Loan Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NvFP3-Z6x4pfLiUwdaKsXq-7qZajh6oX
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

data = pd.read_csv("/content/loan_data.csv")

data.head()

data.info()

data.describe()

data['purpose'].value_counts()

"""1. Converting categorical data into Numerical Data"""

from sklearn.preprocessing import LabelEncoder
number = LabelEncoder()

data['purpose'] = number.fit_transform(data['purpose'].astype('str'))

data.head()

data.info()

data.isna().any()

data.shape

data.tail()

data.describe()

data.skew()

"""2. Let us check the corelation between the features"""

correlation = data.corr()

correlation

"""Let us check the correction by visualizing the data"""

sns.heatmap(correlation, square=True, vmax = 0.8)

sns.set()
columns = ["credit.policy", "purpose", "int.rate", "installment", "log.annual.inc", "dti", "fico", "days.with.cr.line", "revol.bal","revol.util", "inq.last.6mths", "delinq.2yrs", "pub.rec", "not.fully.paid"]
sns.pairplot(data[columns], height = 5, kind = 'scatter', diag_kind = 'kde')
plt.show()

data.info()

data['purpose'].value_counts()

"""Let's Perform feature Enginnering"""

sns.violinplot(y = "log.annual.inc", hue = 'not.fully.paid', data = data)

sns.violinplot(y = 'dti', hue = 'not.fully.paid', data = data)

sns.barplot(x = 'int.rate', y = 'purpose', data = data)

sns.set(rc = {'figure.figsize': (12,8)})
sns.countplot(data = data, x = 'purpose', hue = 'not.fully.paid')

sns.violinplot(y = "inq.last.6mths", hue = 'not.fully.paid', data=data)

sns.violinplot(y = "fico", hue = "not.fully.paid", data = data)

sns.violinplot(y = 'installment', hue = 'not.fully.paid', data = data)

sns.violinplot(y = 'days.with.cr.line', hue = 'not.fully.paid', data = data)

sns.countplot(x = 'pub.rec', hue = 'not.fully.paid', data = data)

sns.pairplot(data = data, hue = "not.fully.paid")

"""Modelling"""

input_data = np.loadtxt('input.csv', delimiter = ',', ndmin=2).astype(np.float32)

input_data

type(input_data[0][0])

labels = np.loadtxt('output.csv', delimiter = ',', ndmin=2).astype(np.float32)

from math import floor, ceil
train_size = 0.75
train_count = floor(input_data.shape[0]*train_size)
x_train = input_data[0:train_count]
y_train = labels[0:train_count]
x_test = input_data[train_count:]
y_test = labels[train_count:]

import keras
from keras.models import Sequential
from keras.layers import Dense

np.random.seed(777)
model = Sequential()
model.add(Dense(12, input_dim = 18, activation = 'relu'))
model.add(Dense(18, activation = 'relu'))
model.add(Dense(2, activation = 'sigmoid'))
model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])
model.fit(x_train, y_train, epochs= 250, batch_size= 12)
scores = model.evaluate(x_test, y_test)
print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))

